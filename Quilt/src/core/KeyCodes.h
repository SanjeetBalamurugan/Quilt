#pragma once

#include "pch.h"

namespace Quilt
{
  enum class KeyCode
  {
    Unknown = -1,
    SPACE = 32,
    APOSTROPHE = 39,
    COMMA = 44,
    MINUS = 45,
    PERIOD = 46,
    SLASH = 47,
    NUM_0 = 48,
    NUM_1 = 49,
    NUM_2 = 50,
    NUM_3 = 51,
    NUM_4 = 52,
    NUM_5 = 53,
    NUM_6 = 54,
    NUM_7 = 55,
    NUM_8 = 56,
    NUM_9 = 57,
    SEMICOLON = 59,
    EQUAL = 61,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    LEFT_BRACKET = 91,
    BACKSLASH = 92,
    RIGHT_BRACKET = 93,
    GRAVE_ACCENT = 96,
    WORLD_1 = 161,
    WORLD_2 = 162,

    ESCAPE = 256,
    ENTER = 257,
    TAB = 258,
    BACKSPACE = 259,
    INSERT = 260,
    DELETE = 261,
    RIGHT = 262,
    LEFT = 263,
    DOWN = 264,
    UP = 265,
    PAGE_UP = 266,
    PAGE_DOWN = 267,
    HOME = 268,
    END = 269,
    CAPS_LOCK = 280,
    SCROLL_LOCK = 281,
    NUM_LOCK = 282,
    PRINT_SCREEN = 283,
    PAUSE = 284,
    F1 = 290,
    F2 = 291,
    F3 = 292,
    F4 = 293,
    F5 = 294,
    F6 = 295,
    F7 = 296,
    F8 = 297,
    F9 = 298,
    F10 = 299,
    F11 = 300,
    F12 = 301,
    F13 = 302,
    F14 = 303,
    F15 = 304,
    F16 = 305,
    F17 = 306,
    F18 = 307,
    F19 = 308,
    F20 = 309,
    F21 = 310,
    F22 = 311,
    F23 = 312,
    F24 = 313,
    F25 = 314,
    KP_0 = 320,
    KP_1 = 321,
    KP_2 = 322,
    KP_3 = 323,
    KP_4 = 324,
    KP_5 = 325,
    KP_6 = 326,
    KP_7 = 327,
    KP_8 = 328,
    KP_9 = 329,
    KP_DECIMAL = 330,
    KP_DIVIDE = 331,
    KP_MULTIPLY = 332,
    KP_SUBTRACT = 333,
    KP_ADD = 334,
    KP_ENTER = 335,
    KP_EQUAL = 336,
    LEFT_SHIFT = 340,
    LEFT_CONTROL = 341,
    LEFT_ALT = 342,
    LEFT_SUPER = 343,
    RIGHT_SHIFT = 344,
    RIGHT_CONTROL = 345,
    RIGHT_ALT = 346,
    RIGHT_SUPER = 347,
    MENU = 348,
  };

  enum class MouseCode
  {
    MOUSE_BUTTON_LEFT = 0,
    MOUSE_BUTTON_RIGHT = 1,
    MOUSE_BUTTON_MIDDLE = 2,
    MOUSE_BUTTON_4 = 3,
    MOUSE_BUTTON_5 = 4,
    MOUSE_BUTTON_6 = 5,
    MOUSE_BUTTON_7 = 6,
    MOUSE_BUTTON_LAST = 7
  };

  inline std::string MouseCodeToString(MouseCode button) {
    switch (button)
    {
    MOUSECODE_TO_STRING_CASE(MOUSE_BUTTON_LEFT)
    MOUSECODE_TO_STRING_CASE(MOUSE_BUTTON_RIGHT)
    MOUSECODE_TO_STRING_CASE(MOUSE_BUTTON_MIDDLE)
    MOUSECODE_TO_STRING_CASE(MOUSE_BUTTON_4)
    MOUSECODE_TO_STRING_CASE(MOUSE_BUTTON_5)
    MOUSECODE_TO_STRING_CASE(MOUSE_BUTTON_6)
    MOUSECODE_TO_STRING_CASE(MOUSE_BUTTON_7)
    MOUSECODE_TO_STRING_CASE(MOUSE_BUTTON_LAST)
    
    default:
      return "Unknown Mouse Button";
      break;
    }
  }

  inline std::string KeyCodeToString(KeyCode key)
  {
    switch (key)
    {
      KEYCODE_TO_STRING_CASE(Unknown)
      KEYCODE_TO_STRING_CASE(SPACE)
      KEYCODE_TO_STRING_CASE(APOSTROPHE)
      KEYCODE_TO_STRING_CASE(COMMA)
      KEYCODE_TO_STRING_CASE(MINUS)
      KEYCODE_TO_STRING_CASE(PERIOD)
      KEYCODE_TO_STRING_CASE(SLASH)
      KEYCODE_TO_STRING_CASE(NUM_0)
      KEYCODE_TO_STRING_CASE(NUM_1)
      KEYCODE_TO_STRING_CASE(NUM_2)
      KEYCODE_TO_STRING_CASE(NUM_3)
      KEYCODE_TO_STRING_CASE(NUM_4)
      KEYCODE_TO_STRING_CASE(NUM_5)
      KEYCODE_TO_STRING_CASE(NUM_6)
      KEYCODE_TO_STRING_CASE(NUM_7)
      KEYCODE_TO_STRING_CASE(NUM_8)
      KEYCODE_TO_STRING_CASE(NUM_9)
      KEYCODE_TO_STRING_CASE(SEMICOLON)
      KEYCODE_TO_STRING_CASE(EQUAL)
      KEYCODE_TO_STRING_CASE(A)
      KEYCODE_TO_STRING_CASE(B)
      KEYCODE_TO_STRING_CASE(C)
      KEYCODE_TO_STRING_CASE(D)
      KEYCODE_TO_STRING_CASE(E)
      KEYCODE_TO_STRING_CASE(F)
      KEYCODE_TO_STRING_CASE(G)
      KEYCODE_TO_STRING_CASE(H)
      KEYCODE_TO_STRING_CASE(I)
      KEYCODE_TO_STRING_CASE(J)
      KEYCODE_TO_STRING_CASE(K)
      KEYCODE_TO_STRING_CASE(L)
      KEYCODE_TO_STRING_CASE(M)
      KEYCODE_TO_STRING_CASE(N)
      KEYCODE_TO_STRING_CASE(O)
      KEYCODE_TO_STRING_CASE(P)
      KEYCODE_TO_STRING_CASE(Q)
      KEYCODE_TO_STRING_CASE(R)
      KEYCODE_TO_STRING_CASE(S)
      KEYCODE_TO_STRING_CASE(T)
      KEYCODE_TO_STRING_CASE(U)
      KEYCODE_TO_STRING_CASE(V)
      KEYCODE_TO_STRING_CASE(W)
      KEYCODE_TO_STRING_CASE(X)
      KEYCODE_TO_STRING_CASE(Y)
      KEYCODE_TO_STRING_CASE(Z)

      KEYCODE_TO_STRING_CASE(LEFT_BRACKET)
      KEYCODE_TO_STRING_CASE(BACKSLASH)
      KEYCODE_TO_STRING_CASE(RIGHT_BRACKET)
      KEYCODE_TO_STRING_CASE(GRAVE_ACCENT)
      KEYCODE_TO_STRING_CASE(WORLD_1)
      KEYCODE_TO_STRING_CASE(WORLD_2)

      KEYCODE_TO_STRING_CASE(ESCAPE)
      KEYCODE_TO_STRING_CASE(ENTER)
      KEYCODE_TO_STRING_CASE(TAB)
      KEYCODE_TO_STRING_CASE(BACKSPACE)
      KEYCODE_TO_STRING_CASE(INSERT)
      KEYCODE_TO_STRING_CASE(DELETE)
      KEYCODE_TO_STRING_CASE(RIGHT)
      KEYCODE_TO_STRING_CASE(LEFT)
      KEYCODE_TO_STRING_CASE(DOWN)
      KEYCODE_TO_STRING_CASE(UP)
      KEYCODE_TO_STRING_CASE(PAGE_UP)
      KEYCODE_TO_STRING_CASE(PAGE_DOWN)
      KEYCODE_TO_STRING_CASE(HOME)
      KEYCODE_TO_STRING_CASE(END)
      KEYCODE_TO_STRING_CASE(CAPS_LOCK)
      KEYCODE_TO_STRING_CASE(SCROLL_LOCK)
      KEYCODE_TO_STRING_CASE(NUM_LOCK)
      KEYCODE_TO_STRING_CASE(PRINT_SCREEN)
      KEYCODE_TO_STRING_CASE(PAUSE)
      KEYCODE_TO_STRING_CASE(F1)
      KEYCODE_TO_STRING_CASE(F2)
      KEYCODE_TO_STRING_CASE(F3)
      KEYCODE_TO_STRING_CASE(F4)
      KEYCODE_TO_STRING_CASE(F5)
      KEYCODE_TO_STRING_CASE(F6)
      KEYCODE_TO_STRING_CASE(F7)
      KEYCODE_TO_STRING_CASE(F8)
      KEYCODE_TO_STRING_CASE(F9)
      KEYCODE_TO_STRING_CASE(F10)
      KEYCODE_TO_STRING_CASE(F11)
      KEYCODE_TO_STRING_CASE(F12)
      KEYCODE_TO_STRING_CASE(F13)
      KEYCODE_TO_STRING_CASE(F14)
      KEYCODE_TO_STRING_CASE(F15)
      KEYCODE_TO_STRING_CASE(F16)
      KEYCODE_TO_STRING_CASE(F17)
      KEYCODE_TO_STRING_CASE(F18)
      KEYCODE_TO_STRING_CASE(F19)
      KEYCODE_TO_STRING_CASE(F20)
      KEYCODE_TO_STRING_CASE(F21)
      KEYCODE_TO_STRING_CASE(F22)
      KEYCODE_TO_STRING_CASE(F23)
      KEYCODE_TO_STRING_CASE(F24)
      KEYCODE_TO_STRING_CASE(F25)
      KEYCODE_TO_STRING_CASE(KP_0)
      KEYCODE_TO_STRING_CASE(KP_1)
      KEYCODE_TO_STRING_CASE(KP_2)
      KEYCODE_TO_STRING_CASE(KP_3)
      KEYCODE_TO_STRING_CASE(KP_4)
      KEYCODE_TO_STRING_CASE(KP_5)
      KEYCODE_TO_STRING_CASE(KP_6)
      KEYCODE_TO_STRING_CASE(KP_7)
      KEYCODE_TO_STRING_CASE(KP_8)
      KEYCODE_TO_STRING_CASE(KP_9)
      KEYCODE_TO_STRING_CASE(KP_DECIMAL)
      KEYCODE_TO_STRING_CASE(KP_DIVIDE)
      KEYCODE_TO_STRING_CASE(KP_MULTIPLY)
      KEYCODE_TO_STRING_CASE(KP_SUBTRACT)
      KEYCODE_TO_STRING_CASE(KP_ADD)
      KEYCODE_TO_STRING_CASE(KP_ENTER)
      KEYCODE_TO_STRING_CASE(KP_EQUAL)
      KEYCODE_TO_STRING_CASE(LEFT_SHIFT)
      KEYCODE_TO_STRING_CASE(LEFT_CONTROL)
      KEYCODE_TO_STRING_CASE(LEFT_ALT)
      KEYCODE_TO_STRING_CASE(LEFT_SUPER)
      KEYCODE_TO_STRING_CASE(RIGHT_SHIFT)
      KEYCODE_TO_STRING_CASE(RIGHT_CONTROL)
      KEYCODE_TO_STRING_CASE(RIGHT_ALT)
      KEYCODE_TO_STRING_CASE(RIGHT_SUPER)
      KEYCODE_TO_STRING_CASE(MENU)
    }

    return ""; // If the key is not found
  }
}